<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>musicservice</groupId>
  <artifactId>MusicService</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>

	<name>MusicService</name>

	<properties>
		<!-- Spring version -->
		<version.spring>3.1.1.RELEASE</version.spring>
		<!-- version.spring>3.2.3.RELEASE</version.spring -->
		<version.spring.test>3.5.6</version.spring.test>

		<!-- Spring Third Party dependencies -->
		<version.aopalliance>1.0</version.aopalliance>

		<!-- Third Party dependencies -->
		<version.standard.taglibs>1.1.2</version.standard.taglibs>
		<version.commons.logging>1.1.1</version.commons.logging>

		<!-- JBoss AS plugin for deployment -->
		<version.jboss.as.maven.plugin>7.1.1.Final</version.jboss.as.maven.plugin>

	</properties>

	<dependencyManagement>

		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any 
				dependencies from org.jboss.spec will have their version defined by this 
				BOM -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
				as the JBoss stack of the Java EE Web Profile 6 APIs), and we use version 
				3.0.0.Final which is the latest release of the stack. You can actually use 
				this stack with any version of JBoss AS that implements Java EE 6, not just 
				JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>3.0.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- Spring dependencies -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-asm</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${version.spring}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<!-- dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> 
				<version>${version.spring.test}</version> <scope>test</scope> </dependency -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${version.spring}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${version.spring}</version>
			</dependency>

			<!-- Third Party dependencies -->
			<dependency>
				<groupId>aopalliance</groupId>
				<artifactId>aopalliance</artifactId>
				<version>${version.aopalliance}</version>
			</dependency>

			<dependency>
				<groupId>taglibs</groupId>
				<artifactId>standard</artifactId>
				<version>${version.standard.taglibs}</version>
			</dependency>
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${version.commons.logging}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Import the JPA API using the provided scope It is included in JBoss 
			AS 7 / EAP 6 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.1.0.Final</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Annotation processor that raising compilation errors whenever constraint 
			annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<version>4.1.0.Final</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.1.0.Final</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>1.2.0.RELEASE</version>
		</dependency>

		<!-- Import Spring dependencies, these are either from community or versions 
			certified in WFK2 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-asm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!-- Other community dependencies -->
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<!-- dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> 
			<version>4.8.2</version> <scope>test</scope> </dependency -->


		<!-- Add cglib for the MemberDaoTest -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>2.2</version>
			<scope>test</scope>
		</dependency>
		
    <!--  dependency>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>springdoclet-maven-plugin</artifactId>
      <version>1.0-beta-1</version>
    </dependency -->
    
        <dependency>
            <groupId>com.mangofactory</groupId>
            <artifactId>swagger-springmvc</artifactId>
            <version>0.6.4</version>
        </dependency>
		

		<!-- Add H2 dependency for embedded testing database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.165</version>
			<scope>provided</scope>
		</dependency>

		<!-- Add JSON dependency, specified in jboss-deployment-structure.xml -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.3</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.3</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.6.4</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>hamcrest-core</artifactId>
					<groupId>org.hamcrest</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.2.3.RELEASE</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>0.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path-assert</artifactId>
			<version>0.8.1</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>
		
      <!-- dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>4.0</version>
      </dependency -->
            
	</dependencies>

	<build>
		<finalName>MusicService</finalName>
		<plugins>
			<!-- Force Java 6 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- Deployent on AS from console -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.as.maven.plugin}</version>
			</plugin>
			<!-- Surefire plugin before 2.9 version is buggy -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12</version>
			</plugin>
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.0.5</version>
				<dependencies>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-jpamodelgen</artifactId>
						<version>1.2.0.Final</version>
					</dependency>
				</dependencies>
			</plugin>		
			<!-- plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.26</version>
				<configuration>
					<webAppConfig>
						<contextPath>/swagger-springmvc-test</contextPath>
					</webAppConfig>
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>8080</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
				</configuration>
			</plugin -->
			<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-javadoc-plugin</artifactId>
        		<version>2.9.1</version>
        		<configuration>
        			<links>
        				<link>http://java.sun.com/j2se/1.5.0/docs/api/</link>
        			</links>
        			<source>1.5</source>
        			<show>public</show>
        			<doctitle>Music Service REST API</doctitle>
        			<title>Music Service REST API</title>
        			<sourceFileIncludes>
        				<include>UserUri.java</include> 
        				<include>RestController.java</include> 				
        			</sourceFileIncludes>
        			<sourcepath>${project.basedir}\src\main\java\musicservice\rest</sourcepath>
        		</configuration>
      		</plugin>	
      		      <!-- This plugin section was added for the SpringDoclet project as an example of using the doclet from Maven. -->
      <!-- run "mvn javadoc:javadoc" to use this plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.6.1</version>
        <configuration>
          <doclet>org.springdoclet.SpringDoclet</doclet>
          <docletArtifact>
            <groupId>org.springdoclet</groupId>
            <artifactId>springdoclet</artifactId>
            <version>0.0.1-SNAPSHOT</version>
          </docletArtifact>
          <useStandardDocletOptions>false</useStandardDocletOptions>
        </configuration>
      </plugin>      
		</plugins>
	</build>
	
	<reporting>
    <plugins>
      <!-- This plugin section was added for the SpringDoclet project as an example of using the doclet from Maven. -->
      <!-- This configuration generates the springdoclet output along with the standard doclet output. -->
      <!-- run "mvn site" to use this plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.6.1</version>
        <reportSets>
          <reportSet>
            <id>springdoc</id>
            <configuration>
              <name>Spring Docs</name>
              <description>Spring documentation</description>
              <doclet>org.springdoclet.SpringDoclet</doclet>
              <docletArtifact>
                <groupId>org.springdoclet</groupId>
                <artifactId>springdoclet</artifactId>
                <version>0.0.1-SNAPSHOT</version>
              </docletArtifact>
              <useStandardDocletOptions>false</useStandardDocletOptions>
              <destDir>springdocs</destDir>
              <additionalparam>
                -f indexSpring.html
                -linkpath ../xref/
              </additionalparam>
            </configuration>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
          <reportSet>
            <id>html</id>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
      </plugin>
    </plugins>
  </reporting>
  
  
	<profiles>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<description>The backend Java service, which provides a RESTful and  databse layer utilizing Spring and hibernate respectfully.</description>
	<url>http://localhost:8080/MusicService/</url>
</project>
